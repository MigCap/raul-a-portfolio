---
import { LANGUAGES } from '@/i18n/ui';
import { getLangFromUrl, getRedirect } from '@/i18n/utils';

const { url } = Astro;
---

<!-- transition:persist -->
<div class="relative inline-block text-left" transition:persist>
  <div>
    <button
      type="button"
      class="text-white hover:text-almost-white inline-flex w-full justify-center gap-x-1.5 rounded-full bg-[color:var(--accent-regular)] border-fuchsia-900 px-3 py-1 text-sm font-semibold shadow-sm ring-gray-300 hover:border-almost-white"
      id="language-picker-button"
      aria-expanded="true"
      aria-haspopup="true"
    >
      {getLangFromUrl(url).toUpperCase()}
      <!-- <svg
        class="-mr-1 h-5 w-5 text-gray-400"
        viewBox="0 0 20 20"
        fill="currentColor"
        aria-hidden="true"
      >
        <path
          fill-rule="evenodd"
          d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
          clip-rule="evenodd"></path>
      </svg> -->
    </button>
  </div>
  <div
    class="absolute transition ease-in duration-75 opacity-0 right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
    id="language-picker-menu"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-picker-button"
    tabindex="-1"
  >
    <div class="py-1" role="none">
      <!-- Active: "bg-gray-100 text-gray-900", Not Active: "text-gray-700" -->
      {
        Object.entries(LANGUAGES).map(([_, givenLanguage], index) => {
          const currentLanguage = getLangFromUrl(url);
          const selectedLang = currentLanguage === givenLanguage;
          return (
            <a
              href={`${getRedirect(givenLanguage, url)}`}
              // class="block px-4 py-2 text-sm text-gray-700"
              class={`${selectedLang ? 'text-fuchsia-900 cursor-default' : ''} ${!selectedLang ? 'text-gray-900 hover:text-fuchsia-900 hover:bg-fuchsia-100 cursor-pointer' : ''} block w-full text-left px-4 py-2 text-sm`}
              role="menuitem"
              tabindex={`${index}`}
              id={`menu-item-${index}`}
            >
              {givenLanguage}
            </a>
          )}
        )
      }
    </div>
  </div>
</div>

<script>
  let languagePickerBtn = document.getElementById(
    'language-picker-button',
  ) as HTMLElement;
  let languagePickerMenu = document.getElementById(
    'language-picker-menu',
  ) as HTMLElement;

  // Dropdown menu, show/hide based on menu state.
  // Entering: "transition ease-out duration-100"
  //   From: "transform opacity-0 scale-95"
  //   To: "transform opacity-100 scale-100"
  // Leaving: "transition ease-in duration-75"
  //   From: "transform opacity-100 scale-100"
  //   To: "transform opacity-0 scale-95"

  function toggleDropdownMenuClasses() {
    const enteringClasses = [
      'ease-out',
      'duration-100',
      'opacity-100',
      'scale-100',
    ];
    const leavingClasses = ['ease-in', 'duration-75', 'opcaity-0', 'scale-95'];

    if (isMenuOpen()) {
      languagePickerMenu.classList.add(...leavingClasses);
      languagePickerMenu.classList.remove(...enteringClasses);
    } else {
      languagePickerMenu.classList.add(...enteringClasses);
      languagePickerMenu.classList.remove(...leavingClasses);
    }
  }

  function isMenuOpen() {
    return languagePickerMenu.classList.contains('opacity-100');
  }

  languagePickerBtn.addEventListener('click', () => {
    toggleDropdownMenuClasses();
  });

  // Active: "bg-gray-100 text-gray-900", Not Active: "text-gray-700"
  // const menuOption1 = document.getElementById('menu-item-0') as HTMLElement;
  // const menuOption2 = document.getElementById('menu-item-1') as HTMLElement;

  // function getCurrentMenuItemSelected(index: any) {
  //   return index === 0 ? menuOption1 : menuOption2;
  // }

  // function isMenuItemSelected(element: any) {
  //   return element.classList.contains('bg-gray-100');
  // }

  // const menuItemActiveClasses = ['bg-gray-100', 'text-gray-900'];
  // const menuItemInactivectiveClasses = ['text-gray-700'];

  // function applyMenuItemClasses(index: any) {
  //   const currentMenuElement = getCurrentMenuItemSelected(index);
  //   if (isMenuItemSelected(currentMenuElement)) {
  //     currentMenuElement.classList.add(...menuItemInactivectiveClasses);
  //     currentMenuElement.classList.remove(...menuItemActiveClasses);
  //   } else {
  //     currentMenuElement.classList.add(...menuItemInactivectiveClasses);
  //     currentMenuElement.classList.remove(...menuItemActiveClasses);
  //   }
  // }

  // menuOption1.addEventListener('click', () => {
  //   applyMenuItemClasses(0);
  // });
  // menuOption2.addEventListener('click', () => {
  //   applyMenuItemClasses(1);
  // });

  // window.addEventListener('DOMContentLoaded', () => applyMenuItemClasses(0));
  // document.addEventListener('astro:after-swap', () => applyMenuItemClasses(0));
</script>
